{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass ScreenReaderComponent {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.fontStyles = ['Monospace', 'Fantasy', 'Times New Roman', \"sans-serif\"]; // Add your desired font styles here\n    this.utterance = new SpeechSynthesisUtterance();\n    this.isPaused = false;\n    this.isDarkMode = false;\n    this.currentFontStyle = this.fontStyles[0];\n  }\n  play() {\n    if (this.isPaused) {\n      speechSynthesis.resume();\n      this.isPaused = false;\n    } else {\n      const screenReaderContent = document.getElementById('screenReaderContent');\n      if (screenReaderContent) {\n        const text = screenReaderContent.innerText;\n        this.utterance.text = text;\n        speechSynthesis.speak(this.utterance);\n      }\n    }\n  }\n  pause() {\n    if (!this.isPaused) {\n      speechSynthesis.pause();\n      this.isPaused = true;\n    }\n  }\n  cancel() {\n    speechSynthesis.cancel();\n    this.isPaused = false;\n  }\n  increaseFontSize() {\n    const screenReaderContent = document.getElementById('screenReaderContent');\n    if (screenReaderContent) {\n      const currentFontSize = parseFloat(window.getComputedStyle(screenReaderContent).fontSize);\n      screenReaderContent.style.fontSize = currentFontSize + 1 + 'px';\n    }\n  }\n  decreaseFontSize() {\n    const screenReaderContent = document.getElementById('screenReaderContent');\n    if (screenReaderContent) {\n      const currentFontSize = parseFloat(window.getComputedStyle(screenReaderContent).fontSize);\n      screenReaderContent.style.fontSize = currentFontSize - 1 + 'px';\n    }\n  }\n  /*  increaseFontSize() {\n     const screenReaderContent = document.getElementById('screenReaderContent');\n     if (screenReaderContent) {\n       const currentFontSize = parseFloat(window.getComputedStyle(screenReaderContent).fontSize);\n       const newFontSize = currentFontSize + 1;\n       this.renderer.setStyle(screenReaderContent, 'fontSize', newFontSize + 'px');\n     }\n   }\n   \n   decreaseFontSize() {\n     const screenReaderContent = document.getElementById('screenReaderContent');\n     if (screenReaderContent) {\n       const currentFontSize = parseFloat(window.getComputedStyle(screenReaderContent).fontSize);\n       const newFontSize = currentFontSize - 1;\n       this.renderer.setStyle(screenReaderContent, 'fontSize', newFontSize + 'px');\n     }\n   } */\n  toggleBackgroundColor() {\n    const screenReaderContent = document.getElementById('screenReaderContent');\n    if (screenReaderContent) {\n      if (this.isDarkMode) {\n        this.renderer.setStyle(screenReaderContent, 'background-color', '');\n        this.isDarkMode = false;\n      } else {\n        this.renderer.setStyle(screenReaderContent, 'background-color', 'darkgray');\n        this.isDarkMode = true;\n      }\n    }\n  }\n  changeFontStyle() {\n    const currentIndex = this.fontStyles.indexOf(this.currentFontStyle);\n    const nextIndex = (currentIndex + 1) % this.fontStyles.length;\n    this.currentFontStyle = this.fontStyles[nextIndex];\n    const screenReaderContent = document.getElementById('screenReaderContent');\n    if (screenReaderContent) {\n      this.renderer.setStyle(screenReaderContent, 'font-family', this.currentFontStyle);\n    }\n  }\n}\nScreenReaderComponent.ɵfac = function ScreenReaderComponent_Factory(t) {\n  return new (t || ScreenReaderComponent)(i0.ɵɵdirectiveInject(i0.Renderer2));\n};\nScreenReaderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScreenReaderComponent,\n  selectors: [[\"app-screen-reader\"]],\n  decls: 22,\n  vars: 2,\n  consts: [[\"id\", \"sidebar-nav\", 1, \"list-group\", \"border-0\", \"rounded-0\", \"text-sm-start\", \"min-vh-100\", \"d-flex\", \"flex-wrap\"], [1, \"list-group-item\", \"border-end-0\", \"text-truncate\"], [1, \"btn\", \"btn-primary\", 3, \"click\"]],\n  template: function ScreenReaderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ScreenReaderComponent_Template_button_click_2_listener() {\n        return ctx.play();\n      });\n      i0.ɵɵtext(3, \"Reproducir\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"div\", 1)(5, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ScreenReaderComponent_Template_button_click_5_listener() {\n        return ctx.pause();\n      });\n      i0.ɵɵtext(6, \"Pausar\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ScreenReaderComponent_Template_button_click_8_listener() {\n        return ctx.cancel();\n      });\n      i0.ɵɵtext(9, \"Cancelar\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 1)(11, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ScreenReaderComponent_Template_button_click_11_listener() {\n        return ctx.increaseFontSize();\n      });\n      i0.ɵɵtext(12, \"+ Tama\\u00F1o Letra\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"div\", 1)(14, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ScreenReaderComponent_Template_button_click_14_listener() {\n        return ctx.decreaseFontSize();\n      });\n      i0.ɵɵtext(15, \"- Tama\\u00F1o Letra\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 1)(17, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ScreenReaderComponent_Template_button_click_17_listener() {\n        return ctx.toggleBackgroundColor();\n      });\n      i0.ɵɵtext(18);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 1)(20, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function ScreenReaderComponent_Template_button_click_20_listener() {\n        return ctx.changeFontStyle();\n      });\n      i0.ɵɵtext(21);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(18);\n      i0.ɵɵtextInterpolate1(\" \", ctx.isDarkMode ? \"Modo Normal\" : \"Modo Oscuro\", \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.currentFontStyle);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { ScreenReaderComponent };","map":{"version":3,"names":["ScreenReaderComponent","constructor","renderer","fontStyles","utterance","SpeechSynthesisUtterance","isPaused","isDarkMode","currentFontStyle","play","speechSynthesis","resume","screenReaderContent","document","getElementById","text","innerText","speak","pause","cancel","increaseFontSize","currentFontSize","parseFloat","window","getComputedStyle","fontSize","style","decreaseFontSize","toggleBackgroundColor","setStyle","changeFontStyle","currentIndex","indexOf","nextIndex","length","i0","ɵɵdirectiveInject","Renderer2","selectors","decls","vars","consts","template","ScreenReaderComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ScreenReaderComponent_Template_button_click_2_listener","ɵɵtext","ɵɵelementEnd","ScreenReaderComponent_Template_button_click_5_listener","ScreenReaderComponent_Template_button_click_8_listener","ScreenReaderComponent_Template_button_click_11_listener","ScreenReaderComponent_Template_button_click_14_listener","ScreenReaderComponent_Template_button_click_17_listener","ScreenReaderComponent_Template_button_click_20_listener","ɵɵadvance","ɵɵtextInterpolate1","ɵɵtextInterpolate"],"sources":["C:\\Users\\PC2\\Desktop\\ASEM6\\Programacion\\Angular\\proyectofinal\\src\\app\\screen-reader\\screen-reader.component.ts","C:\\Users\\PC2\\Desktop\\ASEM6\\Programacion\\Angular\\proyectofinal\\src\\app\\screen-reader\\screen-reader.component.html"],"sourcesContent":["import { Component, Renderer2 } from '@angular/core';\n\n@Component({\n  selector: 'app-screen-reader',\n  templateUrl: './screen-reader.component.html',\n  styleUrls: ['./screen-reader.component.css']\n})\nexport class ScreenReaderComponent {\n  private utterance: SpeechSynthesisUtterance;\n  private isPaused: boolean;\n  public isDarkMode: boolean;\n  public fontStyles: string[] = ['Monospace', 'Fantasy','Times New Roman', \"sans-serif\"]; // Add your desired font styles here\n  public currentFontStyle: string;\n  \n  \n  constructor(private renderer: Renderer2) {\n    this.utterance = new SpeechSynthesisUtterance();\n    this.isPaused = false;\n    this.isDarkMode = false;\n    this.currentFontStyle = this.fontStyles[0];\n    \n  }\n\n  \n\n  play() {\n    if (this.isPaused) {\n      speechSynthesis.resume();\n      this.isPaused = false;\n    } else {\n      const screenReaderContent = document.getElementById('screenReaderContent');\n      if (screenReaderContent) {\n        const text = screenReaderContent.innerText;\n        this.utterance.text = text;\n        speechSynthesis.speak(this.utterance);\n      }\n    }\n  }\n\n  pause() {\n    if (!this.isPaused) {\n      speechSynthesis.pause();\n      this.isPaused = true;\n    }\n  }\n\n  cancel() {\n    speechSynthesis.cancel();\n    this.isPaused = false;\n  }\n\n\n  increaseFontSize() {\n    const screenReaderContent = document.getElementById('screenReaderContent');\n    if (screenReaderContent) {\n      const currentFontSize = parseFloat(window.getComputedStyle(screenReaderContent).fontSize);\n      screenReaderContent.style.fontSize = (currentFontSize + 1) + 'px';\n    }\n  }\n  \n  decreaseFontSize() {\n    const screenReaderContent = document.getElementById('screenReaderContent');\n    if (screenReaderContent) {\n      const currentFontSize = parseFloat(window.getComputedStyle(screenReaderContent).fontSize);\n      screenReaderContent.style.fontSize = (currentFontSize - 1) + 'px';\n    }\n  }\n /*  increaseFontSize() {\n    const screenReaderContent = document.getElementById('screenReaderContent');\n    if (screenReaderContent) {\n      const currentFontSize = parseFloat(window.getComputedStyle(screenReaderContent).fontSize);\n      const newFontSize = currentFontSize + 1;\n      this.renderer.setStyle(screenReaderContent, 'fontSize', newFontSize + 'px');\n    }\n  }\n  \n  decreaseFontSize() {\n    const screenReaderContent = document.getElementById('screenReaderContent');\n    if (screenReaderContent) {\n      const currentFontSize = parseFloat(window.getComputedStyle(screenReaderContent).fontSize);\n      const newFontSize = currentFontSize - 1;\n      this.renderer.setStyle(screenReaderContent, 'fontSize', newFontSize + 'px');\n    }\n  } */\n\n\n  toggleBackgroundColor() {\n    const screenReaderContent = document.getElementById('screenReaderContent');\n    if (screenReaderContent) {\n      if (this.isDarkMode) {\n        this.renderer.setStyle(screenReaderContent, 'background-color', '');\n        this.isDarkMode = false;\n      } else {\n        this.renderer.setStyle(screenReaderContent, 'background-color', 'darkgray');\n        this.isDarkMode = true;\n      }\n    }\n  }\n\n\n  changeFontStyle() {\n    const currentIndex = this.fontStyles.indexOf(this.currentFontStyle);\n    const nextIndex = (currentIndex + 1) % this.fontStyles.length;\n    this.currentFontStyle = this.fontStyles[nextIndex];\n\n    const screenReaderContent = document.getElementById('screenReaderContent');\n    if (screenReaderContent) {\n      this.renderer.setStyle(screenReaderContent, 'font-family', this.currentFontStyle);\n    }\n  }\n  \n}","<!-- <button (click)=\"activateScreenReader()\">Activate Screen Reader</button>\n<button (click)=\"pauseScreenReader()\" [disabled]=\"!isReading\">Pause</button>\n<button (click)=\"cancelScreenReader()\" [disabled]=\"!isReading\">Cancel</button> -->\n<!-- <button (click)=\"play()\"class=\"list-group-item border-end-0 d-inline-block text-truncate\" data-bs-parent=\"#sidebar\">Reproducir</button>\n<button (click)=\"pause()\" class=\"list-group-item border-end-0 d-inline-block text-truncate\" data-bs-parent=\"#sidebar\">Pausar</button>\n<button (click)=\"cancel()\" class=\"list-group-item border-end-0 d-inline-block text-truncate\" data-bs-parent=\"#sidebar\">Cancelar</button>\n<button (click)=\"increaseFontSize()\" class=\"list-group-item border-end-0 d-inline-block text-truncate\" data-bs-parent=\"#sidebar\">+ Tamaño Letra</button>\n<button (click)=\"decreaseFontSize()\" class=\"list-group-item border-end-0 d-inline-block text-truncate\" data-bs-parent=\"#sidebar\">- Tamaño Letra</button>\n<button (click)=\"toggleBackgroundColor()\" class=\"list-group-item border-end-0 d-inline-block text-truncate\" data-bs-parent=\"#sidebar\">{{ isDarkMode ? 'Modo Normal' : 'Modo Oscuro' }}</button>\n<button (click)=\"changeFontStyle()\" class=\"list-group-item border-end-0 d-inline-block text-truncate\" data-bs-parent=\"#sidebar\">{{ currentFontStyle }}</button> -->\n<div id=\"sidebar-nav\" class=\"list-group border-0 rounded-0 text-sm-start min-vh-100 d-flex flex-wrap\">\n    <div class=\"list-group-item border-end-0 text-truncate\">\n        <button (click)=\"play()\" class=\"btn btn-primary\">Reproducir</button>\n    </div>\n    <div class=\"list-group-item border-end-0 text-truncate\">\n        <button (click)=\"pause()\" class=\"btn btn-primary\">Pausar</button>\n    </div>\n    <div class=\"list-group-item border-end-0 text-truncate\">\n        <button (click)=\"cancel()\" class=\"btn btn-primary\">Cancelar</button>\n    </div>\n    <div class=\"list-group-item border-end-0 text-truncate\">\n        <button (click)=\"increaseFontSize()\" class=\"btn btn-primary\">+ Tamaño Letra</button>\n    </div>\n    <div class=\"list-group-item border-end-0 text-truncate\">\n        <button (click)=\"decreaseFontSize()\" class=\"btn btn-primary\">- Tamaño Letra</button>\n    </div>\n    <div class=\"list-group-item border-end-0 text-truncate\">\n        <button (click)=\"toggleBackgroundColor()\" class=\"btn btn-primary\">\n            {{ isDarkMode ? 'Modo Normal' : 'Modo Oscuro' }}\n        </button>\n    </div>\n    <div class=\"list-group-item border-end-0 text-truncate\">\n        <button (click)=\"changeFontStyle()\" class=\"btn btn-primary\">{{ currentFontStyle }}</button>\n    </div>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}